@page "/"
@using System.Timers;

<style>
    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>

<div class="container">
    <div class="row">
        @for (var bodyPartNumber = 0; bodyPartNumber < shuffledBodyParts.Count; bodyPartNumber++)
        {
            var bodyPart = shuffledBodyParts[bodyPartNumber];
            var uniqueDescription = $"Button #{bodyPartNumber}";

            <div class="col-3">
                <button @onclick="@(() => ButtonClick(bodyPart, uniqueDescription))"
                        type="button" class="btn btn-outline-dark">
                    <h1>@shuffledBodyParts[bodyPartNumber]</h1>
                </button>
            </div>
        }
    </div>
    <div class="row">
        <h2>Matches Found: @matchesFound</h2>
    </div>
    <div class="row">
        <h2>Time: @timeDisplay</h2>
    </div>

</div>
@code {
    List<string> bodyPartEmoji = new List<string>()
    {
        "👀", "👀",
        "👂", "👂",
        "👄", "👄",
        "🦵", "🦵",
        "💪", "💪",
        "👃", "👃",
        "✍️", "✍️",
        "👣", "👣",
    };

    List<string> shuffledBodyParts = new List<string>();
    int matchesFound = 0;
    // create timer specific attributes
    Timer timer;
    int tenthsOfSecondsElapsed = 0;
    string timeDisplay;

    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;
        SetupGame();
    }

    private void SetupGame()
    {
        Random random = new Random();
        shuffledBodyParts = bodyPartEmoji
            .OrderBy(item => random.Next())
            .ToList();
        matchesFound = 0;
        tenthsOfSecondsElapsed = 0;
    }

    string lastBodyPartFound = string.Empty;
    string lastDescription = string.Empty;

    private void ButtonClick(string bodyPart, string bodyPartDescription)
    {
        if (lastBodyPartFound == string.Empty)
        {
            // first selection if the pair, remember it.
            lastBodyPartFound = bodyPart;
            lastDescription = bodyPartDescription;
            // start on first click
            timer.Start();
        }
        else if ((lastBodyPartFound == bodyPart) && (lastDescription != bodyPartDescription))
        {
            // Match found! Reset for next pair.
            lastBodyPartFound = string.Empty;

            // Replace found body parts with empty string to hide them.
            shuffledBodyParts = shuffledBodyParts
                .Select(a => a.Replace(bodyPart, string.Empty))
                .ToList();

            matchesFound++;
            // max amount of matches for 16 items is 8
            if (matchesFound == 8)
            {
                timer.Stop();
                timeDisplay += " - Play Again?";

                SetupGame();
            }
        }
        else
        {
            // user selection doesn't match
            // reset selection
            lastBodyPartFound = string.Empty;
        }
    }

    private void Timer_Tick(object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed++;
            timeDisplay = (tenthsOfSecondsElapsed / 10F).ToString("0.0s");
            StateHasChanged();
        });
    }
}
